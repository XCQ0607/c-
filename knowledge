变量命名规则(标识符，方法名)
 1.变量名只能是字母（A-Z，a-z）和数字（0-9）或者下划线（_）组成。   
 2.变量名不能以数字开头，第一个字母必须是字母或者下划线开头
 3.变量名区分大小写
 4.变量名称不能是关键字，以免冲突。例如，int是用于表示整数的关键字。
 5.变量名可以以下划线开头。但是，这不是一个好习惯。

 整数类型（Integer Types）：
int：用于表示整数，通常占用4个字节。
short：用于表示短整数，通常占用2个字节。
long：用于表示长整数，通常占用4个字节。
long long：用于表示更长的整数，通常占用8个字节。
浮点类型（Floating-Point Types）：
float：用于表示单精度浮点数，通常占用4个字节。
double：用于表示双精度浮点数，通常占用8个字节。
long double：用于表示更高精度的浮点数，占用字节数可以根据实现而变化。
字符类型（Character Types）：
char：用于表示字符，通常占用1个字节。
wchar_t：用于表示宽字符，通常占用2或4个字节。       short int
char16_t：用于表示16位Unicode字符，占用2个字节。
char32_t：用于表示32位Unicode字符，占用4个字节。
布尔类型（Boolean Type）：
bool：用于表示布尔值，只能取true或false。
枚举类型（Enumeration Types）：
enum：用于定义一组命名的整数常量。
指针类型（Pointer Types）：
type*：用于表示指向类型为type的对象的指针。
数组类型（Array Types）：
type[]或type[size]：用于表示具有相同类型的元素组成的数组。
结构体类型（Structure Types）：
struct：用于定义包含多个不同类型成员的结构。
类类型（Class Types）：
class：用于定义具有属性和方法的自定义类型。
共用体类型（Union Types）：
union：用于定义一种特殊的数据类型，它可以在相同的内存位置存储不同的数据类型。
在 C++ 中，类型的长度（即占用的字节数）取决于编译器和计算机架构，然而，C++ 标准规定了不同整数类型的最小范围，而不是具体的字节数，这是为了确保代码在不同的系统上都能正确运行。
请注意，以上类型的范围只是 C++ 标准规定的最小要求，实际上，许多系统上这些类型可能占用更多的字节，例如，很多现代计算机上 int 通常占用 4 字节，而 long 可能占用 8 字节。


变量的类型间是可以互相转换的，转换又分为自动转换和强制转换。

自动转换规则：
1、若参与运算量的类型不同，则先转换成同一类型，然后进行运算。
2、转换按数据长度增加的方向进行，以保证精度不降低。如int型和long型运算时，先把int量转成long型后再进行运算。     a、若两种类型的字节数不同，转换成字节数高的类型     b、若两种类型的字节数相同，且一种有符号，一种无符号，则转换成无符号类型
3、所有的浮点运算都是以双精度进行的，即使仅含float单精度量运算的表达式，也要先转换成double型，再作运算。
4、char型和short型参与运算时，必须先转换成int型。
5、在赋值运算中，赋值号两边量的数据类型不同时，赋值号右边量的类型将转换为左边量的类型。如果右边量的数据类型长度比左边长时，将丢失一部分数据，这样会降低精度:


static 全局变量:改变作用范围，不改变存储位置
static 局部变量：改变存储位置，不改变作用范围
静态函数 ：在函数的返回类型前加上static关键字,函数即被定义为静态函数。静态函数与普通函数不同，它只能在声明它的文件当中可见，不能被其它文件使用。
如果在一个源文件中定义的函数，只能被本文件中的函数调用，而不能被同一程序其它文件中的函数调用，这种函数也称为内部函数。定义一个内部函数，只需在函数类型前再加一个“static”关键字即可。

字符 '0' 和 '\0' 及整数 0 的区别
字符型变量用于存储一个单一字符，在 C 语言中用 char 表示，其中每个字符变量都会占用 1 个字节（8 位二进制数）。
整型 int 在内存中占用空间为四个字节（32位二进制数）。
字符 '0'：char c = '0'; 它的 ASCII 码实际上是 48，内存中存放表示：00110000。
字符 '\0'： ASCII 码为 0，表示一个字符串结束的标志。这是转义字符（整体视为一个字符）。由于内存中存储字符，依然是存储的是对应字符集的字符编码，所以内存中的表现形式为 00000000。
整数 0 ： 内存中表示为 00000000 00000000 00000000 00000000，虽然都是 0，但是跟上面字符 '\0' 存储占用长度是不一样的。

转义序列码
\\	\ 字符
\'	' 字符
\"	" 字符
\?	? 字符
\a	警报铃声
\b	退格键
\f	换页符
\n	换行符
\r	回车
\t	水平制表符      相当于Tab
\v	垂直制表符
\ooo	一到三位的八进制数
\xhh . . .	一个或多个数字的十六进制数

const 修饰 *p，指向的对象只读，指针的指向可变：
const int *p = &a;//p是一个指向int类型的const值,与int const *p等价
const的int*类型指针(针对内容，指向的对象不变)
*p = 11;    //编译错误，指向的对象是只读的，不可通过p进行改变
p = &b;     //合法，改变了p的指向
const 修饰 p，指向的对象可变，指针的指向不可变：
int a = 9;
int b = 10;
int * const p = &a;//p是一个const指针
int*类型的指针指向const p(针对指针，p指向不变)
*p = 11;    //合法，
p = &b;     //编译错误，p是一个const指针，只读，不可变
const 右边修饰谁，就说明谁是不可变的。
