变量命名规则(标识符，方法名)
 1.变量名只能是字母（A-Z，a-z）和数字（0-9）或者下划线（_）组成。   
 2.变量名不能以数字开头，第一个字母必须是字母或者下划线开头
 3.变量名区分大小写
 4.变量名称不能是关键字，以免冲突。例如，int是用于表示整数的关键字。
 5.变量名可以以下划线开头。但是，这不是一个好习惯。

 整数类型（Integer Types）：
int：用于表示整数，通常占用4个字节。
short：用于表示短整数，通常占用2个字节。
long：用于表示长整数，通常占用4个字节。
long long：用于表示更长的整数，通常占用8个字节。
浮点类型（Floating-Point Types）：
float：用于表示单精度浮点数，通常占用4个字节。
double：用于表示双精度浮点数，通常占用8个字节。
long double：用于表示更高精度的浮点数，占用字节数可以根据实现而变化。
字符类型（Character Types）：
char：用于表示字符，通常占用1个字节。
wchar_t：用于表示宽字符，通常占用2或4个字节。       short int
char16_t：用于表示16位Unicode字符，占用2个字节。
char32_t：用于表示32位Unicode字符，占用4个字节。
布尔类型（Boolean Type）：
bool：用于表示布尔值，只能取true或false。
枚举类型（Enumeration Types）：
enum：用于定义一组命名的整数常量。
指针类型（Pointer Types）：
type*：用于表示指向类型为type的对象的指针。
数组类型（Array Types）：
type[]或type[size]：用于表示具有相同类型的元素组成的数组。
结构体类型（Structure Types）：
struct：用于定义包含多个不同类型成员的结构。
类类型（Class Types）：
class：用于定义具有属性和方法的自定义类型。
共用体类型（Union Types）：
union：用于定义一种特殊的数据类型，它可以在相同的内存位置存储不同的数据类型。
在 C++ 中，类型的长度（即占用的字节数）取决于编译器和计算机架构，然而，C++ 标准规定了不同整数类型的最小范围，而不是具体的字节数，这是为了确保代码在不同的系统上都能正确运行。
请注意，以上类型的范围只是 C++ 标准规定的最小要求，实际上，许多系统上这些类型可能占用更多的字节，例如，很多现代计算机上 int 通常占用 4 字节，而 long 可能占用 8 字节。


变量的类型间是可以互相转换的，转换又分为自动转换和强制转换。

自动转换规则：
1、若参与运算量的类型不同，则先转换成同一类型，然后进行运算。
2、转换按数据长度增加的方向进行，以保证精度不降低。如int型和long型运算时，先把int量转成long型后再进行运算。     a、若两种类型的字节数不同，转换成字节数高的类型     b、若两种类型的字节数相同，且一种有符号，一种无符号，则转换成无符号类型
3、所有的浮点运算都是以双精度进行的，即使仅含float单精度量运算的表达式，也要先转换成double型，再作运算。
4、char型和short型参与运算时，必须先转换成int型。
5、在赋值运算中，赋值号两边量的数据类型不同时，赋值号右边量的类型将转换为左边量的类型。如果右边量的数据类型长度比左边长时，将丢失一部分数据，这样会降低精度:


static 全局变量:改变作用范围，不改变存储位置
static 局部变量：改变存储位置，不改变作用范围
静态函数 ：在函数的返回类型前加上static关键字,函数即被定义为静态函数。静态函数与普通函数不同，它只能在声明它的文件当中可见，不能被其它文件使用。
如果在一个源文件中定义的函数，只能被本文件中的函数调用，而不能被同一程序其它文件中的函数调用，这种函数也称为内部函数。定义一个内部函数，只需在函数类型前再加一个“static”关键字即可。

字符 '0' 和 '\0' 及整数 0 的区别
字符型变量用于存储一个单一字符，在 C 语言中用 char 表示，其中每个字符变量都会占用 1 个字节（8 位二进制数）。
整型 int 在内存中占用空间为四个字节（32位二进制数）。
字符 '0'：char c = '0'; 它的 ASCII 码实际上是 48，内存中存放表示：00110000。
字符 '\0'： ASCII 码为 0，表示一个字符串结束的标志。这是转义字符（整体视为一个字符）。由于内存中存储字符，依然是存储的是对应字符集的字符编码，所以内存中的表现形式为 00000000。
整数 0 ： 内存中表示为 00000000 00000000 00000000 00000000，虽然都是 0，但是跟上面字符 '\0' 存储占用长度是不一样的。

转义序列码
\\	\ 字符
\'	' 字符
\"	" 字符
\?	? 字符
\a	警报铃声
\b	退格键
\f	换页符
\n	换行符
\r	回车
\t	水平制表符      相当于Tab
\v	垂直制表符
\ooo	一到三位的八进制数
\xhh . . .	一个或多个数字的十六进制数

const 修饰 *p，指向的对象只读，指针的指向可变：
const int *p = &a;//p是一个指向int类型的const值,与int const *p等价
const的int*类型指针(针对内容，指向的对象不变)
*p = 11;    //编译错误，指向的对象是只读的，不可通过p进行改变
p = &b;     //合法，改变了p的指向
const 修饰 p，指向的对象可变，指针的指向不可变：
int a = 9;
int b = 10;
int * const p = &a;//p是一个const指针
int*类型的指针指向const p(针对指针，p指向不变)
*p = 11;    //合法，
p = &b;     //编译错误，p是一个const指针，只读，不可变
const 右边修饰谁，就说明谁是不可变的。
无非两个，地址与内容


1. 类的定义和声明
在 C++ 中，class 关键字用于定义一个类，后面跟着类的名称（这里是 A）。类的定义可以包括数据成员（称为字段或属性）和成员函数（类中的方法）。例如：
class A {
public:
    // 成员函数声明
    void method1();
    int method2(int x);

    // 数据成员
    int data;
    double another_data;
};
在上面的示例中：
class A { ... }; 表示类 A 的定义开始和结束。
public: 是访问说明符（access specifier），它定义了紧随其后的成员的访问权限。public: 意味着接下来的成员可以在类的外部被访问。
2. 成员函数
类中的函数称为成员函数。它们可以被类的对象调用，访问对象的数据成员，以及执行特定的操作。例如，上面的 method1() 和 method2(int x) 就是成员函数的声明。
3. 数据成员
类中的数据成员是类的对象的一部分，用于存储对象的状态信息。在上面的例子中，int data; 和 double another_data; 是两个数据成员的声明。
4. 访问控制
public:、private: 和 protected: 是 C++ 中的三种访问控制关键字。
public: 表示接下来的成员（包括函数和数据成员）可以在类的外部访问。这是一种最常用的访问控制方式，用于定义类的公共接口。
private: 表示接下来的成员只能在类的内部访问，外部无法直接访问。这种方式用于隐藏类的实现细节，提高封装性。
protected: 类似于 private:，但允许派生类（子类）访问这些成员。这种访问控制用于实现继承的概念。





C++ 标准库中的 functional 头文件提供了一组函数对象（或者称为函数子类型）的类模板，这些函数对象可以用作函数指针的替代，或者可以作为参数传递给标准库中的算法。让我们详细讲解几个常用的函数对象及其用途：

1. std::function
std::function 是一个通用的函数封装器，可以用来包装任何可以调用的目标：函数、函数指针、成员函数指针、lambda 表达式等。它提供了一种类型安全的方式来存储、复制、和调用可调用对象。例如：
void foo(int x) {
    std::cout << "foo: " << x << std::endl;
}

int main() {
    std::function<void(int)> func = foo;
    func(42); // 调用 foo 函数
    
    func = [](int x) { std::cout << "lambda: " << x << std::endl; };
    func(10); // 调用 lambda 表达式
    
    return 0;
}
2. std::bind
std::bind 可以创建一个新的可调用对象，该对象是通过对给定函数对象、函数指针或成员函数指针的参数进行绑定而生成的。它可以用来部分应用参数或者重新排列参数顺序。例如：
void foo(int a, int b) {
    std::cout << "foo: " << a << ", " << b << std::endl;
}

int main() {
    auto func1 = std::bind(foo, 1, 2);
    func1(); // 调用 foo(1, 2)

    auto func2 = std::bind(foo, std::placeholders::_2, std::placeholders::_1);
    func2(3, 4); // 调用 foo(4, 3)

    return 0;
}
3. std::plus, std::minus, std::multiplies, std::divides
这些函数对象分别对应于加法、减法、乘法和除法操作。它们可以作为参数传递给标准库中的算法，或者在需要函数对象时进行使用。例如：
int main() {
    std::cout << "std::plus(3, 5): " << std::plus<int>()(3, 5) << std::endl;
    std::cout << "std::minus(3, 5): " << std::minus<int>()(3, 5) << std::endl;
    std::cout << "std::multiplies(3, 5): " << std::multiplies<int>()(3, 5) << std::endl;
    std::cout << "std::divides(3, 5): " << std::divides<int>()(3, 5) << std::endl;

    return 0;
}
4. std::greater, std::less
这些函数对象用于比较两个值的大小，分别表示大于和小于的关系。它们可以作为比较函数传递给排序算法等。例如：
int main() {
    std::cout << "std::greater<int>()(3, 5): " << std::greater<int>()(3, 5) << std::endl;
    std::cout << "std::less<int>()(3, 5): " << std::less<int>()(3, 5) << std::endl;

    return 0;
}
5. std::logical_and, std::logical_or, std::logical_not
这些函数对象分别实现逻辑与、逻辑或和逻辑非操作，可以用作逻辑条件的判断。例如：
int main() {
    std::cout << "std::logical_and<bool>()(true, false): " << std::logical_and<bool>()(true, false) << std::endl;
    std::cout << "std::logical_or<bool>()(true, false): " << std::logical_or<bool>()(true, false) << std::endl;
    std::cout << "std::logical_not<bool>()(true): " << std::logical_not<bool>()(true) << std::endl;
    }

总结
C++ 标准库中的 functional 提供了一系列的函数对象，这些对象可以在不同的场景下使用，包括通用的函数封装（std::function）、参数绑定（std::bind）、数学运算（std::plus、std::minus、std::multiplies、std::divides）、比较操作（std::greater、std::less）、逻辑操作（std::logical_and、std::logical_or、std::logical_not）等
1. std::greater<int>()(3, 5) 中的 ()
在 std::greater<int>()(3, 5) 中，std::greater<int>() 是一个函数对象（即仿函数或者说是函数子类型），它用于比较两个值的大小。在 C++ 中，函数对象的对象（实例）可以像函数一样被调用，这是通过重载了函数调用运算符 operator() 实现的。
具体到这个例子，std::greater<int>() 实际上是一个类模板 std::greater 的实例化对象，它接受一个模板参数 int，表示这个函数对象是用来比较 int 类型的值的。当你写 std::greater<int>()(3, 5) 时，实际上是调用了 std::greater<int> 类模板中的 operator()：
template<typename T>
struct greater {
    bool operator()(const T& x, const T& y) const {
        return x > y;
    }
};
这个 operator() 函数接受两个参数 x 和 y，并返回 x > y 的结果，即比较 x 是否大于 y。因此，std::greater<int>()(3, 5) 实际上会返回 false，因为 3 不大于 5。
2. func = [](int x) 中的 []
在 func = [](int x) { ... } 中，[] 是 lambda 表达式的起始标记。Lambda 表达式是 C++11 引入的一种匿名函数的方式，它允许你定义一个可以被调用的匿名函数对象。
Lambda 表达式的一般形式为：
[capture](parameters) -> return_type { body }
[]：这是 lambda 捕获列表（capture list），用于指定在 lambda 表达式中可以使用的外部变量。可以为空（[]），表示不捕获任何外部变量；也可以使用 [&] 或者 [=] 来捕获所有外部变量（引用或者拷贝）。
(parameters)：这里是 lambda 函数的参数列表，类似于普通函数的参数列表。
{ body }：这是 lambda 函数的函数体，里面可以包含一系列的语句，用于执行具体的操作。
例如，对于 func = [](int x) { ... }，它定义了一个 lambda 表达式，该表达式接受一个 int 类型的参数 x，并执行大括号 { ... } 中的操作。

const	    const定义常量，表示该变量的值不能被修改。
volatile	修饰符 volatile 告诉该变量的值可能会被程序以外的因素改变，如硬件或其他线程。。
restrict	由 restrict 修饰的指针是唯一一种访问它所指向的对象的方式。只有 C99 增加了新的类型限定符 restrict。
mutable	    表示类中的成员变量可以在 const 成员函数中被修改。
static	    用于定义静态变量，表示该变量的作用域仅限于当前文件或当前函数内，不会被其他文件或函数访问。
register	用于定义寄存器变量，表示该变量被频繁使用，可以存储在CPU的寄存器中，以提高程序的运行效率。


C++ 存储类
存储类定义 C++ 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C++ 程序中可用的存储类：
auto：这是默认的存储类说明符，通常可以省略不写。auto 指定的变量具有自动存储期，即它们的生命周期仅限于定义它们的块（block）。auto 变量通常在栈上分配。
register：用于建议编译器将变量存储在CPU寄存器中以提高访问速度。在 C++11 及以后的版本中，register 已经是一个废弃的特性，不再具有实际作用。
static：用于定义具有静态存储期的变量或函数，它们的生命周期贯穿整个程序的运行期。在函数内部，static变量的值在函数调用之间保持不变。在文件内部或全局作用域，static变量具有内部链接，只能在定义它们的文件中访问。
extern：用于声明具有外部链接的变量或函数，它们可以在多个文件之间共享。默认情况下，全局变量和函数具有 extern 存储类。在一个文件中使用extern声明另一个文件中定义的全局变量或函数，可以实现跨文件共享。
mutable (C++11)：用于修饰类中的成员变量，允许在const成员函数中修改这些变量的值。通常用于缓存或计数器等需要在const上下文中修改的数据。
thread_local (C++11)：用于定义具有线程局部存储期的变量，每个线程都有自己的独立副本。线程局部变量的生命周期与线程的生命周期相同。

从 C++ 17 开始，auto 关键字不再是 C++ 存储类说明符，且 register 关键字被弃用。
中的存储类说明符为程序员提供了控制变量和函数生命周期及可见性的手段。
合理使用存储类说明符可以提高程序的可维护性和性能。
从 C++11 开始，register 已经失去了原有的作用，而 mutable 和 thread_local 则是新引入的特性，用于解决特定的编程问题。


class foo {
public:
    foo() : i(100) {}  // 构造函数的定义，使用成员初始化列表初始化 const int i

foo() : i(100) {} 表示：
foo() 是 foo 类的默认构造函数的定义。
: 开始了成员初始化列表。
i(100) 对成员变量 i 进行初始化，值为 100。
{} 是构造函数的体，可以在其中编写构造函数需要执行的代码。


使用 for 循环和 :（范围基于循环）结构是一种简洁而常见的方法。这种方式特别适用于 C++11 及其之后的版本，因为它引入了范围基于循环，可以直接遍历容器类（如数组、向量、列表等）的元素。
    int arr[] = {1, 2, 3, 4, 5};

    // 使用 for 循环和 : 遍历数组
    for (int elem : arr) {
        std::cout << elem << " ";
    }




switch
switch 语句必须遵循下面的规则：
switch 语句中的 expression 必须是一个整型或枚举类型，或者是一个 class 类型，其中 class 有一个单一的转换函数将其转换为整型或枚举类型。
expression 是整型（如 int、char、long 等）或枚举类型（定义了枚举常量的类型）
expression 是一个类类型（自定义的类），那么它可以通过定义一个单参数的构造函数或类型转换运算符（operator type()）来将其转换为整型或枚举类型。
operator int() const { return data; }  // 类型转换运算符

class MyType {
public:
    MyType(int value) : data(value) {}  // 单参数的构造函数
    operator int() const { return data; }  // 类型转换运算符
private:
    int data;
};
MyType obj(42);
switch (obj) {
    case 42:
        // 处理值为 42 的情况
        break;
    default:
        // 默认情况
        break;
}

在 C++ 中，operator int() 是一种类型转换运算符（conversion operator），它允许将一个类类型的对象转换为 int 类型。这种转换运算符允许我们定义自定义类型到基本类型（如整型、浮点型等）的转换规则。
operator int() 是一个特殊的成员函数，它没有显式的返回类型，而是以关键字 operator 开头，后面紧跟要转换的目标类型（这里是 int）
int main() {
    MyType obj(42);
    int value = obj;  // 使用类型转换运算符将 MyType 对象转换为 int
    // 现在 value 变量中存储了 obj 对象中的 data 成员变量的值 42
    std::cout << "Value: " << value << std::endl;
    return 0;
}



1. MyType obj = 42; 的情况
在 C++ 中，MyType obj = 42; 
使用的是复制初始化（copy initialization）的语法。这种语法背后实际上会调用类的构造函数（可以是单参数的构造函数），将右侧的值转换为类类型，并创建一个新的对象。
如果类 MyType 定义了一个接受 int 参数的构造函数：
class MyType {
public:
    MyType(int value) : data(value) {}
    int getData() const { return data; }
private:
    int data;
};
那么，MyType obj = 42; 
会执行以下操作：
调用 MyType(int value) 构造函数，将 42 转换为 MyType 类型的对象。
在内部，构造函数将参数 42 赋值给 data 成员变量。
最终创建一个 MyType 类型的对象 obj。
这种方式的初始化称为复制初始化，因为它实际上是通过复制或转换来初始化对象。
2. MyType obj(42); 的情况
而 MyType obj(42); 
使用的是直接初始化（direct initialization）的语法。这种语法直接调用类的构造函数，传递参数并创建对象。
对于同样的类 MyType：
MyType obj(42);
这行代码会：
直接调用 MyType(int value) 构造函数，将 42 作为参数传递给构造函数。
构造函数内部将参数 42 赋值给 data 成员变量。
最终创建一个 MyType 类型的对象 obj。
区别和建议
效果等同性：从功能上来说，MyType obj = 42; 和 MyType obj(42); 都会执行相同的操作，并且都会调用类的构造函数进行对象的初始化。
语法差异：C++ 中推荐使用直接初始化的方式（即 MyType obj(42);），因为它更加明确和直观，可以避免某些与复制初始化相关的潜在问题。


    类的构造函数详解
类的构造函数是一种特殊的成员函数，用于初始化对象的数据成员。在 C++ 中，构造函数的特点如下：
名称与类名相同：构造函数的名称必须与类名完全相同。
可以有多个构造函数：类可以有多个构造函数，每个构造函数可以接受不同的参数列表，这被称为构造函数的重载。
用于初始化成员变量：构造函数的主要任务是通过参数来初始化类的数据成员，确保对象在创建时处于一个有效的状态。
没有返回类型：构造函数没有返回类型，包括 void，因为它们总是用于创建对象而不是返回值。
    如何调用构造函数
构造函数通常在创建对象时自动调用。在 C++ 中，可以通过多种方式调用构造函数：
直接初始化：使用括号（()）来调用构造函数，例如 MyType obj(42);。
复制初始化：使用等号（=）来调用构造函数，例如 MyType obj = 42;。
动态内存分配：使用 new 关键字动态分配内存并调用构造函数，例如 MyType* ptr = new MyType(42);。
临时对象：在某些表达式中，临时对象的构造函数会被隐式调用，例如作为函数参数或返回值时。
int main() {
    // 直接初始化
    MyType obj1(42);
    // 复制初始化
    MyType obj2 = 42;
    // 动态分配内存并调用构造函数
    MyType* ptr = new MyType(42);
    //如果没有operator int() const { return data; }来捕捉类型转换，此时类型转换应使用上面示例中的getData
    int value = obj1.getData();

    // 调用成员函数获取数据
    std::cout << "obj1 data: " << obj1.getData() << std::endl;
    std::cout << "obj2 data: " << obj2.getData() << std::endl;
    // 释放动态分配的内存
    delete ptr;
    return 0;
}

若要传入多变量
int main() {
    // 直接初始化，传递多个参数来调用构造函数
    MyType obj1(42, 44, 43);
    // 这里的复制初始化将会报错，因为没有匹配的构造函数
    // MyType obj2 = 42;
    // 动态分配内存并调用构造函数，也需要传递多个参数
    MyType* ptr = new MyType(42, 44, 43);
    // 调用成员函数获取数据
    std::cout << "obj1 data: " << obj1.getData() << std::endl;
    // std::cout << "obj2 data: " << obj2.getData() << std::endl;
    // 释放动态分配的内存
    delete ptr;
    return 0;
}



除了构造函数外，类还可以包含以下功能：

析构函数（Destructor）：用于释放对象占用的资源，通常与构造函数成对出现。
成员函数（Member Functions）：用于操作和处理类的数据成员，可以包括访问器（getter）、修改器（setter）、业务逻辑等。
成员变量（Member Variables）：用于存储对象的状态和数据。
静态成员（Static Members）：与类关联而不是与对象关联的成员，被所有类的对象共享。
常量成员函数（Const Member Functions）：声明了 const 后缀的成员函数，表明该函数不会修改对象的状态。
友元函数（Friend Functions）：不是类的成员函数，但可以访问类的私有成员。
运算符重载（Operator Overloading）：允许用户定义对用户自定义的数据类型的运算符操作。
类型转换运算符（Type Conversion Operators）：允许用户定义从类类型到其他类型的隐式或显式类型转换。
继承（Inheritance）：允许一个类继承另一个类的成员。
模板（Templates）：允许编写通用的类或函数，以支持不同的数据类型。
虚函数（Virtual Functions）：用于实现运行时多态性，允许在派生类中重写基类的函数。

class MyType {
public:
    // 构造函数
    MyType(int value) : data(value) {
        std::cout << "Constructing MyType with value: " << data << std::endl;
    }
    // 析构函数
    ~MyType() {
        std::cout << "Destroying MyType with value: " << data << std::endl;
    }
    // 成员函数
    int getData() const {
        return data;
    }
private:
    int data;
};
int main() {
    // 构造函数和析构函数的例子
    MyType obj1(42); // 构造函数调用
    std::cout << "obj1 data: " << obj1.getData() << std::endl;
    {
        MyType obj2(84); // 构造函数调用
        std::cout << "obj2 data: " << obj2.getData() << std::endl;
    } // obj2 超出作用域，析构函数调用
    return 0;
}

Constructing MyType with value: 42
obj1 data: 42
Constructing MyType with value: 84
obj2 data: 84
Destroying MyType with value: 84
Destroying MyType with value: 42


class Rectangle {
public:
    // 构造函数
    Rectangle(double l, double w) : length(l), width(w) {}
    // 成员函数
    double area() const {
        return length * width;
    }
    double perimeter() const {
        return 2 * (length + width);
    }
private:
    double length;
    double width;
};
int main() 
    // 成员函数和成员变量的例子
    Rectangle rect(5.0, 3.0);
    std::cout << "Area: " << rect.area() << std::endl;
    std::cout << "Perimeter: " << rect.perimeter() << std::endl;
    return 0;
}

class Circle {
public:
    Circle(double r) : radius(r) {
        count++; // 每次创建对象时，静态成员 count 增加
    }
    ~Circle() {
        count--; // 每次销毁对象时，静态成员 count 减少
    }
    double area() const {
        return 3.14 * radius * radius;
    }
    static int getCount() {
        return count;
    }
private:
    double radius;
    static int count; // 静态成员变量

};
int Circle::count = 0; // 静态成员变量的定义和初始化
int main() {
    // 静态成员和静态成员函数的例子
    Circle c1(5.0);
    Circle c2(3.0);
    std::cout << "Circle count: " << Circle::getCount() << std::endl;
    return 0;
}


析构函数的执行时机
析构函数是在对象生命周期结束时调用的特殊成员函数，用于释放对象分配的资源或执行清理操作。具体来说：
对于局部对象（在函数内部声明的对象），析构函数会在对象超出作用域时自动调用。例如，在函数中定义的对象，在函数执行完毕时就会调用析构函数。
对于全局对象（全局变量或静态变量），析构函数会在程序退出时调用。
对于动态分配的对象（使用 new 创建的对象），需要手动调用 delete 来销毁对象，从而触发析构函数的执行。
在你的示例中，如果是在 main 函数中定义的对象，析构函数会在 return 0; 之前执行。这是因为 main 函数结束时，局部对象的生命周期也随之结束，编译器会自动调用这些对象的析构函数来释放资源。


在面向对象编程中，友元函数是一种特殊的函数，它被允许访问类的私有（private）成员和受保护（protected）成员，即使这些函数不是类的成员函数。简单来说，友元函数可以突破类的封装性，直接访问类的私有成员。
友元函数的用法：
声明与定义：友元函数的声明通常在类的内部，但定义在类的外部。在声明时需要使用 friend 关键字来标识。
访问私有成员：友元函数可以访问类中声明为 private 的成员变量和成员函数。
友元函数的用途：
增加灵活性：有时候，需要对某些函数赋予访问类私有成员的权限，但又不希望把这些函数定义为类的成员函数。友元函数提供了一种机制，允许这些函数直接访问类的私有成员。
非成员函数的操作：当需要定义某个操作函数，但这个函数不适合作为类的成员函数时，可以考虑使用友元函数。

class MyClass {
private:
    int privateData;
public:
    MyClass(int data) : privateData(data) {}
    // 声明友元函数
    friend void printPrivateData(const MyClass& obj);
};
// 定义友元函数，可以访问私有成员 privateData
void printPrivateData(const MyClass& obj) {
    std::cout << "Private data: " << obj.privateData << std::endl;
}
int main() {
    MyClass obj(42);
    // 调用友元函数，输出私有成员 privateData
    printPrivateData(obj);
    return 0;
}
输出结果：
Private data: 42
在上述示例中，printPrivateData 函数被声明为 MyClass 的友元函数，因此可以直接访问 privateData 成员，即使这个成员是私有的。这种能力使得友元函数在某些情况下非常有用，但需要慎重使用，以避免破坏类的封装性和安全性。


运算符重载是 C++ 中一种强大的特性，它允许我们重新定义已有的运算符（如 +、-、* 等）的行为，使其能够操作用户自定义的数据类型。通过运算符重载，可以使代码更加直观和易于理解，同时提高了代码的可读性和灵活性。
运算符重载的基本概念
运算符重载本质上是通过函数重载的机制实现的，即定义一个特定名称的函数来重新定义运算符的行为。这些函数被称为运算符重载函数或运算符成员函数。
基本语法
运算符重载函数的语法如下：
return_type operator op(parameters) {
    // 实现运算符的具体操作
}
其中：
return_type 是函数的返回类型；
operator 是关键字，用于告诉编译器这是一个运算符重载函数；
op 是要重载的运算符，可以是标准运算符（如 +、-、*、/ 等）或自定义的运算符；
parameters 是运算符操作数。

class Vector {
public:
    Vector(int x, int y) : x(x), y(y) {}
    // 运算符重载：+
    Vector operator+(const Vector& v) const {
        return Vector(x + v.x, y + v.y);
    }
    // 运算符重载：==
    bool operator==(const Vector& v) const {
        return (x == v.x && y == v.y);
    }
    // 友元函数：重载输出运算符 <<
    friend std::ostream& operator<<(std::ostream& os, const Vector& v);
private:
    int x;
    int y;
};
// 友元函数的定义
std::ostream& operator<<(std::ostream& os, const Vector& v) {
    //内部的<<未被重载
    os << "(" << v.x << ", " << v.y << ")";
    return os;
//当我们在重载 operator<< 的函数体中写入 return os;
//它确保了在函数执行结束后，返回的是 std::ostream 对象的引用 os。
//这允许我们在调用链中继续使用 << 运算符，例如：std::cout << obj1 << obj2;
//如果 operator<< 不返回 std::ostream& 类型的引用，那么链式调用就无法实现，因为下一个 << 运算符将无法在上一个运算符的结果上继续操作。
}
int main() {
    Vector v1(1, 2);
    Vector v2(3, 4);
    // 使用运算符重载 +
    Vector v3 = v1 + v2;
    std::cout << "v1 + v2 = " << v3 << std::endl;

    // 使用运算符重载 ==
    if (v1 == v2) {
        std::cout << "v1 and v2 are equal." << std::endl;
    } else {
        std::cout << "v1 and v2 are not equal." << std::endl;
    }
    return 0;
}

x + v.x 和 y + v.y 的含义
在我们的例子中，Vector 类表示二维向量，每个向量有两个坐标分量：x 和 y。
x + v.x 表示当前对象的 x 坐标与参数 v 的 x 坐标相加。
y + v.y 表示当前对象的 y 坐标与参数 v 的 y 坐标相加。
举例来说，如果有两个向量：
v1 的坐标为 (1, 2)
v2 的坐标为 (3, 4)
当我们执行 v1 + v2 时，运算符重载中的函数 Vector operator+(const Vector& v) const 将被调用。在这个函数中，this 指向 v1，参数 v 指向 v2。因此，x 对应的是 v1.x，v.x 对应的是 v2.x，y 对应的是 v1.y，v.y 对应的是 v2.y。所以 x + v.x 就是 1 + 3，y + v.y 就是 2 + 4，结果为 (4, 6)。

传入const Vector& v
const 表示参数 v 是一个常量引用，即在函数内部不能修改参数 v 所引用的对象。
Vector 表示这是一个 Vector 类型的对象。
& 表示这是一个引用类型参数，允许通过引用传递对象，而不是进行对象的拷贝。


1. 调用重载的输出运算符 <<
std::cout << "v1 + v2 = " << v3 << std::endl;       A<<B,<<算一个运算符
调用顺序解释：
首先，std::cout 是 std::ostream 类的一个对象，用于标准输出。
std::cout << "v1 + v2 = " << v3 是一个链式调用。在这里，operator<< 被多次调用，每次调用返回的仍然是 std::ostream 对象，允许我们继续串联调用。
具体调用过程：
std::cout << "v1 + v2 = "：首先，将字符串 "v1 + v2 = " 输出到控制台。
std::cout 是一个 std::ostream 对象。
operator<<(std::ostream&, const char*) 被调用，将字符串插入到输出流中。
"v1 + v2 = " 后面的 << v3：然后，v3 是一个 Vector 类型的对象，因此 operator<<(std::ostream&, const Vector&) 被调用。
这里的 os 是 std::cout，即输出流对象。
v 是 v3，即要输出的 Vector 对象。
2. operator<< 函数参数解释
现在来详细解释 operator<< 的函数签名 std::ostream& operator<<(std::ostream& os, const Vector& v)：
std::ostream& os：这是一个引用类型的 std::ostream 对象，表示输出流。在我们的例子中，它是 std::cout，即标准输出流。
const Vector& v：这是一个常量引用，表示要输出的 Vector 对象。在我们的例子中，它是 v3，即我们希望输出的 Vector 对象。
3. 为什么函数参数有两个，但看起来只传入了一个 v3？
这是因为 C++ 的运算符重载允许我们定义多个参数的函数。当我们使用 std::cout << v3; 
这样的语句时，编译器会将其解释为调用 operator<< 函数，并自动传递 std::cout 和 v3 给函数。这种语法使得我们可以通过重载运算符来定义自定义类型的输出行为，使代码更加清晰和灵活。

