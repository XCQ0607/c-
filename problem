------------------------------------------------
题目:

解答：
go.cpp文件


main.cpp文件:
#include "go.cpp"

1.补全go.cpp中的函数，写main.cpp中的main函数(传入示例1参数)，调用go.cpp中的该函数并传入参数

2.对我详细讲述一下题目的问题是什么，要求什么。解释各个传入的变量，各个函数的作用，以及输出值得含义

3.通过示例1详细和我讲一下这个代码从main函数开始发的执行过程。最好使用图形化的方式帮助理解。

4.如果解决代码使用了某种算法，请向我说明并介绍它

请认真看待每一个问题为独立问题,认真理解我的需求并做出回答
------------------------------------------------
3101
题目:
给你一个二进制数组nums,如果一个子数组中 不存在 两个 相邻 元素的值 相同 的情况，我们称这样的子数组为 交替子数组 。
返回数组 nums 中交替子数组的数量。

示例 1：
输入： nums = [0,1,1,1]
输出： 5
解释：
以下子数组是交替子数组：[0] 、[1] 、[1] 、[1] 以及 [0,1] 。
示例 2：
输入： nums = [1,0,1,0]
输出： 10
解释：
数组的每个子数组都是交替子数组。可以统计在内的子数组共有 10 个。

详细执行过程
输入：nums = [0, 1, 1, 0, 1]
初始化 count = n = 5（每个单个元素都是一个交替子数组）。
初始化 length = 1。
从第二个元素开始遍历数组：
i = 1：
nums[1] (1) != nums[0] (0)，所以 length++，即 length = 2。
count += length - 1，即 count = 5 + 1 = 6。
记录的子数组有：[0, 1]。
i = 2：
nums[2] (1) == nums[1] (1)，所以 length = 1。
count 不变，仍然为 6。
i = 3：
nums[3] (0) != nums[2] (1)，所以 length++，即 length = 2。
count += length - 1，即 count = 6 + 1 = 7。
记录的子数组有：[1, 0]。
i = 4：
nums[4] (1) != nums[3] (0)，所以 length++，即 length = 3。
count += length - 1，即 count = 7 + 2 = 9。
记录的子数组有：[0, 1], [1, 0, 1]。

长度为1的子数组：
[0]
[1]
[1]
[0]
[1]
长度为2的子数组：
[0, 1]
[1, 0]
[0, 1]
长度为3的子数组：
[1, 0, 1]

----------------------------------------------
94
题目:
给定一个二叉树的根节点 root ，返回 它的 中序 遍历 。

示例 1：
输入：root = [1,null,2,3]
输出：[1,3,2]
示例 2：
输入：root = []
输出：[]
示例 3：
输入：root = [1]
输出：[1]
解答：
go.cpp文件
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        function<void(TreeNode*)> dfs = [&](TreeNode* root) {
            if (!root) {
                return;
            }
            dfs(root->left);
            ans.push_back(root->val);
            dfs(root->right);
        };
        dfs(root);
        return ans;
    }

    1
     \
      2
     /
    3
从main函数开始：
创建树节点root（值1），root->right（值2），root->right->left（值3）。
调用inorderTraversal函数，传入root。
在inorderTraversal函数中，定义了dfs递归函数，并调用dfs(root)。
dfs递归过程：
第一次调用：node为节点1，先递归左子树（为空，返回），访问节点1（添加1到结果），递归右子树（节点2）。
第二次调用：node为节点2，先递归左子树（节点3），访问节点2（添加2到结果），递归右子树（为空，返回）。
第三次调用：node为节点3，先递归左子树（为空，返回），访问节点3（添加3到结果），递归右子树（为空，返回）。
最终的中序遍历结果为[1, 3, 2]。

算法介绍
这个代码使用了深度优先搜索（DFS）的递归方式来实现中序遍历。DFS是一种遍历或搜索树或图的算法，该算法会尽可能深的搜索树的分支。中序遍历是DFS的一种特例，其特点是先访问左子树，再访问根节点，最后访问右子树。DFS递归实现简洁且易于理解，但对于特别深的树，可能会导致栈溢出。

vector<int> inorderTraversal(TreeNode* root):
定义一个函数 inorderTraversal，接受一个 TreeNode* 类型的参数 root，返回一个 vector<int> 类型的结果。
vector<int> ans:
定义一个名为 ans 的 vector<int>，用于存储中序遍历的结果。
function<void(TreeNode*)> dfs = [&](TreeNode* root) { ... };:
定义一个 dfs lambda表达式，用于递归遍历二叉树。它没有返回值，接受一个 TreeNode* 类型的参数 root。[&] 表示捕获外部作用域中的所有变量（包括 ans）并按引用传递。
dfs(root->left);:
递归调用 dfs 以遍历左子树。
ans.push_back(root->val);:
将当前节点的值添加到 ans 中。
dfs(root->right);:
递归调用 dfs 以遍历右子树。
dfs(root);:
开始从根节点开始进行中序遍历。
return ans;:
返回包含中序遍历结果的 ans。
总结来说，你的代码使用了C++11的lambda表达式和 std::function，通过递归实现二叉树的中序遍历，并将遍历结果存储在 vector<int> 中。

------------------------------------------------
235
题目:
给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。
百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”
例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]

示例 1:
输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
输出: 6 
解释: 节点 2 和节点 8 的最近公共祖先是 6。
示例 2:
输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
输出: 2
解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。
解答：
go.cpp文件
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if (p->val < root->val && q->val < root->val) {
             return lowestCommonAncestor(root->left, p, q);
         }
         else if (p->val > root->val && q->val > root->val) {
             return lowestCommonAncestor(root->right, p, q);
         }
         else {
             return root;
         }
    }
       6
      / \
     2   8
    / \ / \
   0  4 7  9
     / \
    3   5
判断条件分析：
二叉搜索树（BST）性质：

左子树中的所有节点的值小于根节点的值。
右子树中的所有节点的值大于根节点的值。
这个性质使得我们可以根据节点的值快速确定下一步应该遍历左子树还是右子树。

还有普通二叉树
    TreeNode* leftLCA = lowestCommonAncestor(root->left, p, q);
    TreeNode* rightLCA = lowestCommonAncestor(root->right, p, q);
    两个都执行一遍，根据是否有返回值确定具体方位
--------------------------------------------------
2515
题目:
给你一个下标从 0 开始的 环形 字符串数组 words 和一个字符串 target 。环形数组 意味着数组首尾相连。
形式上， words[i] 的下一个元素是 words[(i + 1) % n] ，而 words[i] 的前一个元素是 words[(i - 1 + n) % n] ，其中 n 是 words 的长度。
从 startIndex 开始，你一次可以用 1 步移动到下一个或者前一个单词。
返回到达目标字符串 target 所需的最短距离。如果 words 中不存在字符串 target ，返回 -1 。

示例 1：
输入：words = ["hello","i","am","leetcode","hello"], target = "hello", startIndex = 1
输出：1
解释：从下标 1 开始，可以经由以下步骤到达 "hello" ：
- 向右移动 3 个单位，到达下标 4 。
- 向左移动 2 个单位，到达下标 4 。
- 向右移动 4 个单位，到达下标 0 。
- 向左移动 1 个单位，到达下标 0 。
到达 "hello" 的最短距离是 1 。
示例 2：
输入：words = ["a","b","leetcode"], target = "leetcode", startIndex = 0
输出：1
解释：从下标 0 开始，可以经由以下步骤到达 "leetcode" ：
- 向右移动 2 个单位，到达下标 3 。
- 向左移动 1 个单位，到达下标 3 。
到达 "leetcode" 的最短距离是 1 。
示例 3：
输入：words = ["i","eat","leetcode"], target = "ate", startIndex = 0
输出：-1
解释：因为 words 中不存在字符串 "ate" ，所以返回 -1 。
解答：
go.cpp文件
int closetTarget(vector<string>& words, string target, int startIndex) {
    int n = words.size();
    int minDistance = n;  // 初始化为一个大数
    bool found = false;
    
    for (int i = 0; i < n; ++i) {
        if (words[i] == target) {
            found = true;
            int distance = min(abs(i - startIndex), n - abs(i - startIndex));
            minDistance = min(minDistance, distance);
        }
    }
    
    return found ? minDistance : -1;
}
---------------------------------------------------
2959
题目:
一个公司在全国有 n 个分部，它们之间有的有道路连接。一开始，所有分部通过这些道路两两之间互相可以到达。
公司意识到在分部之间旅行花费了太多时间，所以它们决定关闭一些分部（也可能不关闭任何分部），同时保证剩下的分部之间两两互相可以到达且最远距离不超过 maxDistance 。
两个分部之间的 距离 是通过道路长度之和的 最小值 。
给你整数 n ，maxDistance 和下标从 0 开始的二维整数数组 roads ，其中 roads[i] = [ui, vi, wi] 表示一条从 ui 到 vi 长度为 wi的 无向 道路。
请你返回关闭分部的可行方案数目，满足每个方案里剩余分部之间的最远距离不超过 maxDistance。
注意，关闭一个分部后，与之相连的所有道路不可通行。
注意，两个分部之间可能会有多条道路。

示例 1：
输入：n = 3, maxDistance = 5, roads = [[0,1,2],[1,2,10],[0,2,10]]
输出：5
解释：可行的关闭分部方案有：
- 关闭分部集合 [2] ，剩余分部为 [0,1] ，它们之间的距离为 2 。
- 关闭分部集合 [0,1] ，剩余分部为 [2] 。
- 关闭分部集合 [1,2] ，剩余分部为 [0] 。
- 关闭分部集合 [0,2] ，剩余分部为 [1] 。
- 关闭分部集合 [0,1,2] ，关闭后没有剩余分部。
总共有 5 种可行的关闭方案。
示例 2：
输入：n = 3, maxDistance = 5, roads = [[0,1,20],[0,1,10],[1,2,2],[0,2,2]]
输出：7
解释：可行的关闭分部方案有：
- 关闭分部集合 [] ，剩余分部为 [0,1,2] ，它们之间的最远距离为 4 。
- 关闭分部集合 [0] ，剩余分部为 [1,2] ，它们之间的距离为 2 。
- 关闭分部集合 [1] ，剩余分部为 [0,2] ，它们之间的距离为 2 。
- 关闭分部集合 [0,1] ，剩余分部为 [2] 。
- 关闭分部集合 [1,2] ，剩余分部为 [0] 。
- 关闭分部集合 [0,2] ，剩余分部为 [1] 。
- 关闭分部集合 [0,1,2] ，关闭后没有剩余分部。
总共有 7 种可行的关闭方案。
示例 3：
输入：n = 1, maxDistance = 10, roads = []
输出：2
解释：可行的关闭分部方案有：
- 关闭分部集合 [] ，剩余分部为 [0] 。
- 关闭分部集合 [0] ，关闭后没有剩余分部。
总共有 2 种可行的关闭方案。
解答：
go.cpp文件
    int numberOfSets(int n, int maxDistance, vector<vector<int>>& roads) {
        int ans = 0;
        for (int mask = 0; mask < 1 << n; ++mask) {
            int g[n][n];
            memset(g, 0x3f, sizeof(g));
            for (auto& e : roads) {
                int u = e[0], v = e[1], w = e[2];
                if ((mask >> u & 1) & (mask >> v & 1)) {
                    g[u][v] = min(g[u][v], w);
                    g[v][u] = min(g[v][u], w);
                }
            }
            for (int k = 0; k < n; ++k) {
                if (mask >> k & 1) {
                    g[k][k] = 0;
                    for (int i = 0; i < n; ++i) {
                        for (int j = 0; j < n; ++j) {
                            g[i][j] = min(g[i][j], g[i][k] + g[k][j]);
                        }
                    }
                }
            }
            int ok = 1;
            for (int i = 0; i < n && ok == 1; ++i) {
                for (int j = 0; j < n && ok == 1; ++j) {
                    if ((mask >> i & 1) & (mask >> j & 1) && g[i][j] > maxDistance) {
                        ok = 0;
                    }
                }
            }
            ans += ok;
        }
        return ans;
    }
图形化理解
假设 n = 3, maxDistance = 5, roads = [[0, 1, 2], [1, 2, 10], [0, 2, 10]]，当前 mask = 011（表示关闭分部 0 和 1）。
初始时，距离矩阵 g 被设置为无穷大：
g = [  [∞, ∞, ∞],
  [∞, ∞, ∞],
  [∞, ∞, ∞]
]
遍历 roads：
道路 [0, 1, 2]：
u = 0, v = 1, w = 2
检查 (mask >> u & 1) & (mask >> v & 1) => (011 >> 0 & 1) & (011 >> 1 & 1) => 1 & 1 => 1（满足条件）
更新 g[0][1] 和 g[1][0]：
g = [  [∞, 2, ∞],
  [2, ∞, ∞],
  [∞, ∞, ∞]
]
道路 [1, 2, 10]：
u = 1, v = 2, w = 10
检查 (mask >> u & 1) & (mask >> v & 1) => (011 >> 1 & 1) & (011 >> 2 & 1) => 1 & 0 => 0（不满足条件）
道路 [0, 2, 10]：
u = 0, v = 2, w = 10
检查 (mask >> u & 1) & (mask >> v & 1) => (011 >> 0 & 1) & (011 >> 2 & 1) => 1 & 0 => 0（不满足条件）
最终的距离矩阵 g：
g = [  [∞, 2, ∞],
  [2, ∞, ∞],
  [∞, ∞, ∞]
]
在接下来的步骤中，会使用 Floyd-Warshall 算法计算剩余分部之间的最短路径，然后检查是否满足 maxDistance 的限制。

Floyd-Warshall 算法是一种用于计算所有节点之间最短路径的算法。它通过逐步更新节点之间的距离，最终得到每对节点之间的最短路径。我们通过 mask = 011 的例子来详细说明这个过程。
g = [
  [∞, 2, ∞],
  [2, ∞, ∞],
  [∞, ∞, ∞]
]
----------------------------------------------------
3112
题目:
给你一个二维数组 edges 表示一个 n 个点的无向图，其中 edges[i] = [ui, vi, lengthi] 表示节点 ui 和节点 vi 之间有一条需要 lengthi 单位时间通过的无向边。
同时给你一个数组 disappear ，其中 disappear[i] 表示节点 i 从图中消失的时间点，在那一刻及以后，你无法再访问这个节点。
注意，图有可能一开始是不连通的，两个节点之间也可能有多条边。
请你返回数组 answer ，answer[i] 表示从节点 0 到节点 i 需要的 最少 单位时间。如果从节点 0 出发 无法 到达节点 i ，那么 answer[i] 为 -1 。

示例 1：
输入：n = 3, edges = [[0,1,2],[1,2,1],[0,2,4]], disappear = [1,1,5]
输出：[0,-1,4]
解释：
我们从节点 0 出发，目的是用最少的时间在其他节点消失之前到达它们。
对于节点 0 ，我们不需要任何时间，因为它就是我们的起点。
对于节点 1 ，我们需要至少 2 单位时间，通过 edges[0] 到达。但当我们到达的时候，它已经消失了，所以我们无法到达它。
对于节点 2 ，我们需要至少 4 单位时间，通过 edges[2] 到达。
示例 2：
输入：n = 3, edges = [[0,1,2],[1,2,1],[0,2,4]], disappear = [1,3,5]
输出：[0,2,3]
解释：
我们从节点 0 出发，目的是用最少的时间在其他节点消失之前到达它们。
对于节点 0 ，我们不需要任何时间，因为它就是我们的起点。
对于节点 1 ，我们需要至少 2 单位时间，通过 edges[0] 到达。
对于节点 2 ，我们需要至少 3 单位时间，通过 edges[0] 和 edges[1] 到达。
示例 3：
输入：n = 2, edges = [[0,1,1]], disappear = [1,1]
输出：[0,-1]
解释：
当我们到达节点 1 的时候，它恰好消失，所以我们无法到达节点 1 .

解答：
go.cpp文件
class Solution {
public:
    vector<int> minimumTime(int n, vector<vector<int>>& edges, vector<int>& disappear) {
        vector<vector<pair<int, int>>> g(n); // 稀疏图用邻接表
        for (auto& e : edges) {
            int x = e[0], y = e[1], wt = e[2];
            g[x].emplace_back(y, wt);
            g[y].emplace_back(x, wt);
        }

        vector<int> dis(n, -1);
        dis[0] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;
        pq.emplace(0, 0);
        while (!pq.empty()) {
            auto [dx, x] = pq.top();
            pq.pop();
            if (dx > dis[x]) { // x 之前出堆过
                continue;
            }
            for (auto& [y, d] : g[x]) {
                int new_dis = dx + d;
                if (new_dis < disappear[y] && (dis[y] < 0 || new_dis < dis[y])) {
                    dis[y] = new_dis; // 更新 x 的邻居的最短路
                    pq.emplace(new_dis, y);
                }
            }
        }
        return dis;
    }
};

vector<vector<int>>:
这是一个二维向量（vector）。
在C++中，vector是一种动态数组，可以自动调整大小。
vector<vector<int>>表示一个向量，其中每个元素本身也是一个向量，即每个元素都是一个整数数组。
这种结构非常适合处理矩阵或二维数组，因为你可以通过两个索引来访问元素，例如matrix[i][j]

---------------------------------------------
题目:
给你一个大小为 3 * 3 ，下标从 0 开始的二维整数矩阵 grid ，分别表示每一个格子里石头的数目。网格图中总共恰好有 9 个石头，一个格子里可能会有 多个 石头。
每一次操作中，你可以将一个石头从它当前所在格子移动到一个至少有一条公共边的相邻格子。
请你返回每个格子恰好有一个石头的 最少移动次数 。

示例 1：
输入：grid = [[1,1,0],[1,1,1],[1,2,1]]
输出：3
解释：让每个格子都有一个石头的一个操作序列为：
1 - 将一个石头从格子 (2,1) 移动到 (2,2) 。
2 - 将一个石头从格子 (2,2) 移动到 (1,2) 。
3 - 将一个石头从格子 (1,2) 移动到 (0,2) 。
总共需要 3 次操作让每个格子都有一个石头。
让每个格子都有一个石头的最少操作次数为 3 。
示例 2：
输入：grid = [[1,3,0],[1,0,0],[1,0,3]]
输出：4
解释：让每个格子都有一个石头的一个操作序列为：
1 - 将一个石头从格子 (0,1) 移动到 (0,2) 。
2 - 将一个石头从格子 (0,1) 移动到 (1,1) 。
3 - 将一个石头从格子 (2,2) 移动到 (1,2) 。
4 - 将一个石头从格子 (2,2) 移动到 (2,1) 。
总共需要 4 次操作让每个格子都有一个石头。
让每个格子都有一个石头的最少操作次数为 4 。
解答：

仔细理解一下,这里from中元素有几个,那么to中就有几个元素,所以from和to的长度是一样的.
from 和 to 的意义
from: 存储那些石头数量多于 1 的格子的位置，因为这些格子中有多余的石头需要移动到其他位置。
to: 存储那些石头数量为 0 的格子的位置，因为这些格子需要石头。

详细解释
我们需要将每个多余的石头从 from 中的格子移动到 to 中的格子中。通过这种方式，我们可以确保每个格子最终都有一个石头。

在 minimumMoves 函数中，首先遍历整个网格，并填充 from 和 to：
int minimumMoves(vector<vector<int>>& grid) {
    vector<pair<int, int>> from, to;
    for (int i = 0; i < grid.size(); i++) {
        for (int j = 0; j < grid[i].size(); j++) {
            if (grid[i][j]) {
                for (int k = 1; k < grid[i][j]; k++) {
                    from.emplace_back(i, j);
                }
            } else {
                to.emplace_back(i, j);
            }
        }
    }

    int ans = INT_MAX;
    do {
        int total = 0;
        for (int i = 0; i < from.size(); i++) {
            total += abs(from[i].first - to[i].first) + abs(from[i].second - to[i].second);
        }
        ans = min(ans, total);
    } while (next_permutation(from.begin(), from.end()));
    return ans;
}
以示例输入 grid = {{1, 1, 0}, {1, 1, 1}, {1, 2, 1}} 为例：
遍历网格，填充 from 和 to：
1 1 0
1 1 1
1 2 1
对于格子 (2, 1) 有 2 个石头，意味着有 1 个多余石头：
from = [(2, 1)]
对于格子 (0, 2) 没有石头，意味着需要 1 个石头：
to = [(0, 2)]
最小移动次数计算
使用 next_permutation 生成所有排列组合，并计算每种组合的移动次数：
do {
    int total = 0;
    for (int i = 0; i < from.size(); i++) {
        total += abs(from[i].first - to[i].first) + abs(from[i].second - to[i].second);
    }
    ans = min(ans, total);
} while (next_permutation(from.begin(), from.end()));
对于 from = [(2, 1)] 和 to = [(0, 2)]，计算曼哈顿距离：
total = abs(2-0) + abs(1-2) = 2 + 1 = 3
ans = min(INT_MAX, 3) = 3
最终，返回最小移动次数 3。

总结
from 和 to 的作用是帮助我们找到多余石头和需要石头的格子的位置，并通过排列组合计算最小的移动次数。通过这种方式，我们可以确保每个格子最终都有一个石头，并且总移动次数最小。

--------------------------------------------------
2101
题目:
给你一个炸弹列表。一个炸弹的 爆炸范围 定义为以炸弹为圆心的一个圆。
炸弹用一个下标从 0 开始的二维整数数组 bombs 表示，其中 bombs[i] = [xi, yi, ri] 。xi 和 yi 表示第 i 个炸弹的 X 和 Y 坐标，ri 表示爆炸范围的 半径 。
你需要选择引爆 一个 炸弹。当这个炸弹被引爆时，所有 在它爆炸范围内的炸弹都会被引爆，这些炸弹会进一步将它们爆炸范围内的其他炸弹引爆。
给你数组 bombs ，请你返回在引爆 一个 炸弹的前提下，最多 能引爆的炸弹数目。

示例 1：
输入：bombs = [[2,1,3],[6,1,4]]
输出：2
解释：
上图展示了 2 个炸弹的位置和爆炸范围。
如果我们引爆左边的炸弹，右边的炸弹不会被影响。
但如果我们引爆右边的炸弹，两个炸弹都会爆炸。
所以最多能引爆的炸弹数目是 max(1, 2) = 2 。
示例 2：
输入：bombs = [[1,1,5],[10,10,5]]
输出：1
解释：
引爆任意一个炸弹都不会引爆另一个炸弹。所以最多能引爆的炸弹数目为 1 。
示例 3：
输入：bombs = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,6,4]]
输出：5
解释：
最佳引爆炸弹为炸弹 0 ，因为：
- 炸弹 0 引爆炸弹 1 和 2 。红色圆表示炸弹 0 的爆炸范围。
- 炸弹 2 引爆炸弹 3 。蓝色圆表示炸弹 2 的爆炸范围。
- 炸弹 3 引爆炸弹 4 。绿色圆表示炸弹 3 的爆炸范围。
所以总共有 5 个炸弹被引爆。
解答：
go.cpp文件

    int maximumDetonation(vector<vector<int>>& bombs) {
        int n = bombs.size();
        vector<vector<int>> g(n);
        for (int i = 0; i < n; i++) {
            long long x = bombs[i][0], y = bombs[i][1], r = bombs[i][2];
            for (int j = 0; j < n; j++) {
                long long dx = x - bombs[j][0];
                long long dy = y - bombs[j][1];
                if (j != i && dx * dx + dy * dy <= r * r) {
                    g[i].push_back(j); // i 可以引爆 j
                }
            }
        }

        int ans = 0;
        vector<int> vis(n);
        auto dfs = [&](auto&& dfs, int x) -> int {
            vis[x] = true;
            int cnt = 1;
            for (int y : g[x]) {
                if (!vis[y]) {
                    cnt += dfs(dfs, y);
                }
            }
            return cnt;
        };
        for (int i = 0; i < n; i++) {
            ranges::fill(vis, 0);
            ans = max(ans, dfs(dfs, i));
        }
        return ans;
    }

递归调用的实现方式：

1.传递自身引用的方式：通过传递dfs自身来实现递归。由于C++ lambda函数无法直接在定义中递归调用自身，因此需要通过传递自身引用来实现递归。
2.使用std::function的方式：通过显式定义std::function来包装lambda函数，这样lambda函数可以直接递归调用自身。

为什么使用auto&&
在递归lambda函数中使用auto&&允许你传递lambda函数自身的引用，并能够处理所有类型的引用，从而实现递归调用。以下是使用auto&&的主要原因：
通用性：auto&&可以接受和传递所有类型的引用，无论是左值还是右值。这使得函数更加通用和灵活。
避免拷贝：使用引用可以避免不必要的拷贝操作，提升性能。

auto dfs = [&](auto&& dfs, int x) -> int {
    vis[x] = true;
    int cnt = 1;
    for (int y : g[x]) {
        if (!vis[y]) {
            cnt += dfs(dfs, y);
        }
    }
    return cnt;
};
使用std::function的方式：

function<int(int)> dfs = [&](int x) -> int {
    vis[x] = true;
    int cnt = 1;
    for (int y : g[x]) {
        if (!vis[y]) {
            cnt += dfs(y);
        }
    }
    return cnt;
};
------------------------------------------------
3098
题目:
给你一个长度为 n 的整数数组 nums 和一个 正 整数 k 。
一个子序列的能量定义为子序列中 任意 两个元素的差值绝对值的 最小值 。
请你返回 nums 中长度 等于 k 的 所有 子序列的 能量和 。
由于答案可能会很大，将答案对 109 + 7 取余 后返回。

示例 1：
输入：nums = [1,2,3,4], k = 3
输出：4
解释：
nums 中总共有 4 个长度为 3 的子序列：[1,2,3] ，[1,3,4] ，[1,2,4] 和 [2,3,4] 。能量和为 |2 - 3| + |3 - 4| + |2 - 1| + |3 - 4| = 4 。
示例 2：
输入：nums = [2,2], k = 2
输出：0
解释：
nums 中唯一一个长度为 2 的子序列是 [2,2] 。能量和为 |2 - 2| = 0 。
示例 3：
输入：nums = [4,3,-1], k = 2
输出：10
解释：
nums 总共有 3 个长度为 2 的子序列：[4,3] ，[4,-1] 和 [3,-1] 。能量和为 |4 - 3| + |4 - (-1)| + |3 - (-1)| = 10 。
解答：
go.cpp文件
#include <vector>
#include <set>
#include <cstring>
#include <algorithm>

#define MOD 1000000007

void MD(int& x) {
    if (x >= MOD) {
        x -= MOD;
    }
}

int sumOfPowers(std::vector<int>& nums, int k) {
    const int n = nums.size();
    std::sort(nums.begin(), nums.end());
    std::set<int> deltas;

    // Calculate all pairwise absolute differences
    for (int i = 0; i < n; ++i) {
        for (int j = i + 1; j < n; ++j) {
            deltas.insert(nums[j] - nums[i]);
        }
    }

    constexpr int MAXN = 50;
    static int combs[MAXN + 1][MAXN + 1];
    std::memset(combs, 0, sizeof(combs));

    combs[0][0] = 1;
    for (int i = 1; i <= n; ++i) {
        combs[i][0] = 1;
        for (int j = 1; j <= i; ++j) {
            combs[i][j] = (combs[i-1][j-1] + combs[i-1][j]) % MOD;
        }
    }

    // dp[i][j]: number of subsequences of length j ending at index i
    static int dp[MAXN][MAXN + 1];

    int last_ans = combs[n][k];
    int ans = 0;

    for (int delta : deltas) {
        std::memset(dp, 0, sizeof(dp));
        dp[0][0] = 1;
        dp[0][1] = 1;

        for (int i = 1; i < n; ++i) {
            int feasible = i - 1;
            while (feasible >= 0 && nums[i] - nums[feasible] <= delta) {
                --feasible;
            }

            for (int j = 0; j <= k; ++j) {
                dp[i][j] = dp[i - 1][j];
                if (j > 0 && feasible >= 0) {
                    dp[i][j] = (dp[i][j] + dp[feasible][j - 1]) % MOD;
                }
            }
        }

        int this_ans = dp[n - 1][k];
        int this_cnt = (last_ans + MOD - this_ans) % MOD;
        ans = (ans + 1LL * this_cnt * delta % MOD) % MOD;
        last_ans = this_ans;
    }

    return ans;

}
计算组合数 combs[i][j]，即从 i 个元素中选取 j 个元素的组合数，计算过程如下：

combs[0][0] = 1：初始化边界条件，0 个元素选 0 个元素的组合数为 1。
combs[i][0] = 1：当选取 0 个元素时，组合数始终为 1。
combs[i][j] = (combs[i-1][j-1] + combs[i-1][j]) % MOD：递推关系，利用上一行的结果来计算当前行的组合数。即当前位置的组合数等于选择当前元素和不选择当前元素两种情况的组合数之和，对 MOD 取余防止数值溢出。

---------------------------------------------------
2766
题目:
给你一个下标从 0 开始的整数数组 nums ，表示一些石块的初始位置。再给你两个长度 相等 下标从 0 开始的整数数组 moveFrom 和 moveTo 。
在 moveFrom.length 次操作内，你可以改变石块的位置。在第 i 次操作中，你将位置在 moveFrom[i] 的  所有石块  (注意)移到位置 moveTo[i] 。
完成这些操作后，请你按升序返回所有 有 石块的位置。
注意：
如果一个位置至少有一个石块，我们称这个位置 有 石块。
一个位置可能会有多个石块。

示例 1：
输入：nums = [1,6,7,8], moveFrom = [1,7,2], moveTo = [2,9,5]
输出：[5,6,8,9]
解释：一开始，石块在位置 1,6,7,8 。
第 i = 0 步操作中，我们将位置 1 处的石块移到位置 2 处，位置 2,6,7,8 有石块。
第 i = 1 步操作中，我们将位置 7 处的石块移到位置 9 处，位置 2,6,8,9 有石块。
第 i = 2 步操作中，我们将位置 2 处的石块移到位置 5 处，位置 5,6,8,9 有石块。
最后，至少有一个石块的位置为 [5,6,8,9] 。
示例 2：
输入：nums = [1,1,3,3], moveFrom = [1,3], moveTo = [2,2]
输出：[2]
解释：一开始，石块在位置 [1,1,3,3] 。
第 i = 0 步操作中，我们将位置 1 处的石块移到位置 2 处，有石块的位置为 [2,2,3,3] 。
第 i = 1 步操作中，我们将位置 3 处的石块移到位置 2 处，有石块的位置为 [2,2,2,2] 。
由于 2 是唯一有石块的位置，我们返回 [2] 。
解答：
go.cpp文件
    vector<int> relocateMarbles(vector<int>& nums, vector<int>& moveFrom, vector<int>& moveTo) {
        unordered_set<int> st(nums.begin(), nums.end());
        for (int i = 0; i < moveFrom.size(); i++) {
            st.erase(moveFrom[i]);
            st.insert(moveTo[i]);
        }
        vector<int> ans(st.begin(), st.end());
        ranges::sort(ans);
        return ans;
    }
--------------------------------------
2844
题目:
给你一个下标从 0 开始的字符串 num ，表示一个非负整数。
在一次操作中，您可以选择 num 的任意一位数字并将其删除。请注意，如果你删除 num 中的所有数字，则 num 变为 0。
返回最少需要多少次操作可以使 num 变成特殊数字。
如果整数 x 能被 25 整除，则该整数 x 被认为是特殊数字。

示例 1：
输入：num = "2245047"
输出：2
解释：删除数字 num[5] 和 num[6] ，得到数字 "22450" ，可以被 25 整除。
可以证明要使数字变成特殊数字，最少需要删除 2 位数字。
示例 2：
输入：num = "2908305"
输出：3
解释：删除 num[3]、num[4] 和 num[6] ，得到数字 "2900" ，可以被 25 整除。
可以证明要使数字变成特殊数字，最少需要删除 3 位数字。
示例 3：
输入：num = "10"
输出：1
解释：删除 num[0] ，得到数字 "0" ，可以被 25 整除。
可以证明要使数字变成特殊数字，最少需要删除 1 位数字。
解答：
go.cpp文件
    int minimumOperations(string num) {
        int n = num.length();
        auto f = [&](string tail) {
            int i = num.rfind(tail[1]);
            if (i == string::npos || i == 0) {
                return n;
            }
            i = num.rfind(tail[0], i - 1);
            return i == string::npos ? n : n - i - 2;
        };
        int zero = n - (num.find('0') != string::npos);
        return min({zero, f("00"), f("25"), f("50"), f("75")});
    }
--------------------------------------
3011
题目:
给你一个下标从 0 开始且全是 正 整数的数组 nums 。
一次 操作 中，如果两个 相邻 元素在二进制下设置位的数目相同 ，那么你可以将这两个元素交换。你可以执行这个操作 任意次 （也可以 0 次）。
如果你可以使数组变为非降序，请你返回 true ，否则返回 false 。

示例 1：
输入：nums = [8,4,2,30,15]
输出：true
解释：我们先观察每个元素的二进制表示。 2 ，4 和 8 分别都只有一个数位为 1 ，分别为 "10" ，"100" 和 "1000" 。15 和 30 分别有 4 个数位为 1 ："1111" 和 "11110" 。
我们可以通过 4 个操作使数组非降序：
- 交换 nums[0] 和 nums[1] 。8 和 4 分别只有 1 个数位为 1 。数组变为 [4,8,2,30,15] 。
- 交换 nums[1] 和 nums[2] 。8 和 2 分别只有 1 个数位为 1 。数组变为 [4,2,8,30,15] 。
- 交换 nums[0] 和 nums[1] 。4 和 2 分别只有 1 个数位为 1 。数组变为 [2,4,8,30,15] 。
- 交换 nums[3] 和 nums[4] 。30 和 15 分别有 4 个数位为 1 ，数组变为 [2,4,8,15,30] 。
数组变成有序的，所以我们返回 true 。
注意我们还可以通过其他的操作序列使数组变得有序。
示例 2：
输入：nums = [1,2,3,4,5]
输出：true
解释：数组已经是非降序的，所以我们返回 true 。
示例 3：
输入：nums = [3,16,8,4,2]
输出：false
解释：无法通过操作使数组变为非降序。
解答：
go.cpp文件
    bool canSortArray(vector<int>& nums) {
        for (int i = 0, n = nums.size(); i < n;) {
            int start = i;
            int ones = __builtin_popcount(nums[i++]);
            while (i < n && __builtin_popcount(nums[i]) == ones) {
                i++;
            }
            sort(nums.begin() + start, nums.begin() + i);
        }
        return ranges::is_sorted(nums);
    }
--------------------------------------
题目:
给你一个字符串 s 和一个整数 k 。
定义函数 distance(s1, s2) ，用于衡量两个长度为 n 的字符串 s1 和 s2 之间的距离，即：
字符 'a' 到 'z' 按 循环 顺序排列，对于区间 [0, n - 1] 中的 i ，计算所有「 s1[i] 和 s2[i] 之间 最小距离」的 和 。
例如，distance("ab", "cd") == 4 ，且 distance("a", "z") == 1 。
你可以对字符串 s 执行 任意次 操作。在每次操作中，可以将 s 中的一个字母 改变 为 任意 其他小写英文字母。
返回一个字符串，表示在执行一些操作后你可以得到的 字典序最小 的字符串 t ，且满足 distance(s, t) <= k 。

示例 1：
输入：s = "zbbz", k = 3
输出："aaaz"
解释：在这个例子中，可以执行以下操作：
将 s[0] 改为 'a' ，s 变为 "abbz" 。
将 s[1] 改为 'a' ，s 变为 "aabz" 。
将 s[2] 改为 'a' ，s 变为 "aaaz" 。
"zbbz" 和 "aaaz" 之间的距离等于 k = 3 。
可以证明 "aaaz" 是在任意次操作后能够得到的字典序最小的字符串。
因此，答案是 "aaaz" 。
示例 2：
输入：s = "xaxcd", k = 4
输出："aawcd"
解释：在这个例子中，可以执行以下操作：
将 s[0] 改为 'a' ，s 变为 "aaxcd" 。
将 s[2] 改为 'w' ，s 变为 "aawcd" 。
"xaxcd" 和 "aawcd" 之间的距离等于 k = 4 。
可以证明 "aawcd" 是在任意次操作后能够得到的字典序最小的字符串。
因此，答案是 "aawcd" 。
示例 3：
输入：s = "lol", k = 0
输出："lol"
解释：在这个例子中，k = 0，更改任何字符都会使得距离大于 0 。
因此，答案是 "lol" 。
解答：
go.cpp文件
    string getSmallestString(string s, int k) {
        for (char& c : s) {
            int dis = min(c - 'a', 'z' - c + 1);
            if (dis > k) {
                c -= k;
                break;
            }
            c = 'a';
            k -= dis;
        }
        return s;
    }

初始状态：s = "zbbz", k = 3
第一次循环 (c = 'z'):
dis = min('z' - 'a', 'z' - 'z' + 1) = min(25, 1) = 1
dis (1) <= k (3)，所以执行： c = 'a' k = k - dis = 3 - 1 = 2
循环结束后：s = "abbz", k = 2
第二次循环 (c = 'b'):
dis = min('b' - 'a', 'z' - 'b' + 1) = min(1, 25) = 1
dis (1) <= k (2)，所以执行： c = 'a' k = k - dis = 2 - 1 = 1
循环结束后：s = "aabz", k = 1
第三次循环 (c = 'b'):
dis = min('b' - 'a', 'z' - 'b' + 1) = min(1, 25) = 1
dis (1) <= k (1)，所以执行： c = 'a' k = k - dis = 1 - 1 = 0
循环结束后：s = "aaaz", k = 0
第四次循环 (c = 'z'):
dis = min('z' - 'a', 'z' - 'z' + 1) = min(25, 1) = 1
dis (1) > k (0)，所以执行： c -= k (但 k = 0，所以 c 不变) break (跳出循环)
循环结束后：s = "aaaz", k = 0
函数返回 s = "aaaz"

--------------------------------
题目:
在二维平面上的 x 轴上，放置着一些方块。
给你一个二维整数数组 positions ，其中 positions[i] = [lefti, sideLengthi] 表示：第 i 个方块边长为 sideLengthi ，其左侧边与 x 轴上坐标点 lefti 对齐。
每个方块都从一个比目前所有的落地方块更高的高度掉落而下。方块沿 y 轴负方向下落，直到着陆到 另一个正方形的顶边 或者是 x 轴上 。一个方块仅仅是擦过另一个方块的左侧边或右侧边不算着陆。一旦着陆，它就会固定在原地，无法移动。
在每个方块掉落后，你必须记录目前所有已经落稳的 方块堆叠的最高高度 。
返回一个整数数组 ans ，其中 ans[i] 表示在第 i 块方块掉落后堆叠的最高高度。

示例 1：
输入：positions = [[1,2],[2,3],[6,1]]
输出：[2,5,5]
解释：
第 1 个方块掉落后，最高的堆叠由方块 1 组成，堆叠的最高高度为 2 。
第 2 个方块掉落后，最高的堆叠由方块 1 和 2 组成，堆叠的最高高度为 5 。
第 3 个方块掉落后，最高的堆叠仍然由方块 1 和 2 组成，堆叠的最高高度为 5 。
因此，返回 [2, 5, 5] 作为答案。
示例 2：
输入：positions = [[100,100],[200,100]]
输出：[100,100]
解释：
第 1 个方块掉落后，最高的堆叠由方块 1 组成，堆叠的最高高度为 100 。
第 2 个方块掉落后，最高的堆叠可以由方块 1 组成也可以由方块 2 组成，堆叠的最高高度为 100 。
因此，返回 [100, 100] 作为答案。
注意，方块 2 擦过方块 1 的右侧边，但不会算作在方块 1 上着陆。
解答：
go.cpp文件
    int findSite(vector<int>& site,int M,int tar){
        int l=0,r=M-1,mid;
        while(l<=r){
            mid=(l+r)/2;
            if(site[mid]==tar) return mid;
            else if(site[mid]>tar) r=mid-1;
            else l=mid+1;
        }
        return -1;
    }
    vector<int> fallingSquares(vector<vector<int>>& positions) {
        int N=positions.size(),maxH=0;
        vector<int> site;
        site.reserve(2*N);
        for(const auto& v:positions){
            site.emplace_back(v[0]);
            site.emplace_back(v[0]+v[1]-1);
        }
        sort(site.begin(),site.end());
        site.erase(unique(site.begin(),site.end()),site.end());
        int M=site.size();
        vector<int> height(M,0),ans(N);
        for(int i=0,start,end,len,tmp;i<N;++i){
            len=positions[i][1];
            start=findSite(site,M,positions[i][0]);
            end=positions[i][0]+len-1;
            tmp=0;
            for(int j=start;j<M&&site[j]<=end;++j) tmp=max(tmp,height[j]);
            tmp+=len;
            for(int j=start;j<M&&site[j]<=end;++j) height[j]=tmp;
            maxH=max(tmp,maxH);
            ans[i]=maxH;
        }
        return ans;
    }

positions = [[1,2],[2,3],[6,1]]
初始状态：
N = 3 (positions的长度)
M = 6 (site的长度)
height = [0, 0, 0, 0, 0, 0] (初始化为0)
maxH = 0
ans = [] (空数组，将被填充)

第一次迭代 (i = 0, positions[0] = [1,2]):

len = 2
start = findSite(site, 6, 1) = 0 (1在site中的索引是0)
end = 1 + 2 - 1 = 2
tmp = 0 (初始值)
第一个for循环: tmp 保持为0，因为所有height[j]都是0
tmp += len, 所以 tmp = 2
第二个for循环: 更新 height[0] 和 height[1] 为 2 height 变为 [2, 2, 0, 0, 0, 0]
maxH = max(2, 0) = 2
ans[0] = 2
ans = [2]
height = [2, 2, 0, 0, 0, 0]

第二次迭代 (i = 1, positions[1] = [2,3]):

len = 3
start = findSite(site, 6, 2) = 1 (2在site中的索引是1)
end = 2 + 3 - 1 = 4
tmp = 0 (初始值)
第一个for循环: tmp = max(0, height[1], height[2], height[3]) = 2
tmp += len, 所以 tmp = 5
第二个for循环: 更新 height[1], height[2], 和 height[3] 为 5 height 变为 [2, 5, 5, 5, 0, 0]
maxH = max(5, 2) = 5
ans[1] = 5
ans = [2, 5]
height = [2, 5, 5, 5, 0, 0]

第三次迭代 (i = 2, positions[2] = [6,1]):

len = 1
start = findSite(site, 6, 6) = 4 (6在site中的索引是4)
end = 6 + 1 - 1 = 6
tmp = 0 (初始值)
第一个for循环: tmp = max(0, height[4], height[5]) = 0
tmp += len, 所以 tmp = 1
第二个for循环: 更新 height[4] 和 height[5] 为 1 height 变为 [2, 5, 5, 5, 1, 1]
maxH = max(1, 5) = 5 (不变)
ans[2] = 5
最终结果：
ans = [2, 5, 5]
height = [2, 5, 5, 5, 1, 1]

这个过程展示了如何使用离散化的坐标系统来模拟方块的堆叠。每次迭代都会:

确定当前方块影响的范围（start 到 end）
计算当前方块下方的最大高度（第一个for循环）
更新受影响区域的高度（第二个for循环）
更新全局最大高度和结果数组

----------------------------------
题目:
给你一个下标从 0 开始的二维数组 variables ，其中 variables[i] = [ai, bi, ci, mi]，以及一个整数 target 。
如果满足以下公式，则下标 i 是 好下标：
0 <= i < variables.length
((aibi % 10)ci) % mi == target
返回一个由 好下标 组成的数组，顺序不限 。

示例 1：
输入：variables = [[2,3,3,10],[3,3,3,1],[6,1,1,4]], target = 2
输出：[0,2]
解释：对于 variables 数组中的每个下标 i ：
1) 对于下标 0 ，variables[0] = [2,3,3,10] ，(23 % 10)3 % 10 = 2 。
2) 对于下标 1 ，variables[1] = [3,3,3,1] ，(33 % 10)3 % 1 = 0 。
3) 对于下标 2 ，variables[2] = [6,1,1,4] ，(61 % 10)1 % 4 = 2 。
因此，返回 [0,2] 作为答案。
示例 2：
输入：variables = [[39,3,1000,1000]], target = 17
输出：[]
解释：对于 variables 数组中的每个下标 i ：
1) 对于下标 0 ，variables[0] = [39,3,1000,1000] ，(393 % 10)1000 % 1000 = 1 。
因此，返回 [] 作为答案。
解答：
go.cpp文件
    int pow(int x, int n, int mod){
        int res = 1;
        while(n){
            if(n&1){
                res = res * x % mod;
            }
            x = x * x % mod;
            n >>= 1;
        }
        return res;
    }
    vector<int> getGoodIndices(vector<vector<int>>& variables, int target) {
        vector<int> res;
        for (int i = 0; i < variables.size(); i++){
            auto& v = variables[i];
            if (pow(pow(v[0], v[1], 10), v[2], v[3]) == target) {
                res.push_back(i);
            }
        }
        return res;
    }
-------------------------------
3111
题目:
给你一个二维整数数组 point ，其中 points[i] = [xi, yi] 表示二维平面内的一个点。同时给你一个整数 w 。你需要用矩形 覆盖所有 点。
每个矩形的左下角在某个点 (x1, 0) 处，且右上角在某个点 (x2, y2) 处，其中 x1 <= x2 且 y2 >= 0 ，同时对于每个矩形都 必须 满足 x2 - x1 <= w 。
如果一个点在矩形内或者在边上，我们说这个点被矩形覆盖了。
请你在确保每个点都 至少 被一个矩形覆盖的前提下，最少 需要多少个矩形。
注意：一个点可以被多个矩形覆盖。

示例 1：
输入：points = [[2,1],[1,0],[1,4],[1,8],[3,5],[4,6]], w = 1
输出：2
解释：
一个矩形的左下角在 (1, 0) ，右上角在 (2, 8) 。
一个矩形的左下角在 (3, 0) ，右上角在 (4, 8) 。
示例 2：
输入：points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]], w = 2
输出：3
解释：
一个矩形的左下角在 (0, 0) ，右上角在 (2, 2) 。
一个矩形的左下角在 (3, 0) ，右上角在 (5, 5) 。
一个矩形的左下角在 (6, 0) ，右上角在 (6, 6) 。
示例 3：
输入：points = [[2,3],[1,2]], w = 0
输出：2
解释：
一个矩形的左下角在 (1, 0) ，右上角在 (1, 2) 。
一个矩形的左下角在 (2, 0) ，右上角在 (2, 3) 。
解答：
go.cpp文件
    int minRectanglesToCoverPoints(vector<vector<int>>& points, int w) {
        ranges::sort(points, [](const auto& p, const auto& q) {
            return p[0] < q[0];
        });
        int ans = 0;
        int x2 = -1;
        for (auto& p : points) {
            if (p[0] > x2) {
                ans++;
                x2 = p[0] + w;
            }
        }
        return ans;
    }
---------------------------------------------------
40
题目:
「力扣挑战赛」心算项目的挑战比赛中，要求选手从 N 张卡牌中选出 cnt 张卡牌，若这 cnt 张卡牌数字总和为偶数，则选手成绩「有效」且得分为 cnt 张卡牌数字总和。 给定数组 cards 和 cnt，其中 cards[i] 表示第 i 张卡牌上的数字。 请帮参赛选手计算最大的有效得分。若不存在获取有效得分的卡牌方案，则返回 0。

示例 1：
输入：cards = [1,2,8,9], cnt = 3
输出：18
解释：选择数字为 1、8、9 的这三张卡牌，此时可获得最大的有效得分 1+8+9=18。
示例 2：
输入：cards = [3,3,1], cnt = 1
输出：0
解释：不存在获取有效得分的卡牌方案。
解答：
go.cpp文件
    int maxmiumScore(vector<int>& cards, int cnt) {
        ranges::sort(cards, greater());
        int s = reduce(cards.begin(), cards.begin() + cnt, 0); // 最大的 cnt 个数之和
        if (s % 2 == 0) { // s 是偶数
            return s;
        }

        auto replace_sum = [&](int x) -> int {
            for (int i = cnt; i < cards.size(); i++) {
                if (cards[i] % 2 != x % 2) { // 找到一个最大的奇偶性和 x 不同的数
                    return s - x + cards[i]; // 用 cards[i] 替换 s
                }
            }
            return 0;
        };

        int x = cards[cnt - 1];
        int ans = replace_sum(x); // 替换 x
        for (int i = cnt - 2; i >= 0; i--) { // 前 cnt-1 个数
            if (cards[i] % 2 != x % 2) { // 找到一个最小的奇偶性和 x 不同的数
                ans = max(ans, replace_sum(cards[i])); // 替换
                break;
            }
        }
        return ans;
    }
---------------------------------------------------
2940
题目:
给你一个下标从 0 开始的正整数数组 heights ，其中 heights[i] 表示第 i 栋建筑的高度。
如果一个人在建筑 i ，且存在 i < j 的建筑 j 满足 heights[i] < heights[j] ，那么这个人可以移动到建筑 j 。
给你另外一个数组 queries ，其中 queries[i] = [ai, bi] 。第 i 个查询中，Alice 在建筑 ai ，Bob 在建筑 bi 。
请你能返回一个数组 ans ，其中 ans[i] 是第 i 个查询中，Alice 和 Bob 可以相遇的 最左边的建筑 。如果对于查询 i ，Alice 和 Bob 不能相遇，令 ans[i] 为 -1 。

示例 1：
输入：heights = [6,4,8,5,2,7], queries = [[0,1],[0,3],[2,4],[3,4],[2,2]]
输出：[2,5,-1,5,2]
解释：第一个查询中，Alice 和 Bob 可以移动到建筑 2 ，因为 heights[0] < heights[2] 且 heights[1] < heights[2] 。
第二个查询中，Alice 和 Bob 可以移动到建筑 5 ，因为 heights[0] < heights[5] 且 heights[3] < heights[5] 。
第三个查询中，Alice 无法与 Bob 相遇，因为 Alice 不能移动到任何其他建筑。
第四个查询中，Alice 和 Bob 可以移动到建筑 5 ，因为 heights[3] < heights[5] 且 heights[4] < heights[5] 。
第五个查询中，Alice 和 Bob 已经在同一栋建筑中。
对于 ans[i] != -1 ，ans[i] 是 Alice 和 Bob 可以相遇的建筑中最左边建筑的下标。
对于 ans[i] == -1 ，不存在 Alice 和 Bob 可以相遇的建筑。
示例 2：
输入：heights = [5,3,8,2,6,1,4,6], queries = [[0,7],[3,5],[5,2],[3,0],[1,6]]
输出：[7,6,-1,4,6]
解释：第一个查询中，Alice 可以直接移动到 Bob 的建筑，因为 heights[0] < heights[7] 。
第二个查询中，Alice 和 Bob 可以移动到建筑 6 ，因为 heights[3] < heights[6] 且 heights[5] < heights[6] 。
第三个查询中，Alice 无法与 Bob 相遇，因为 Bob 不能移动到任何其他建筑。
第四个查询中，Alice 和 Bob 可以移动到建筑 4 ，因为 heights[3] < heights[4] 且 heights[0] < heights[4] 。
第五个查询中，Alice 可以直接移动到 Bob 的建筑，因为 heights[1] < heights[6] 。
对于 ans[i] != -1 ，ans[i] 是 Alice 和 Bob 可以相遇的建筑中最左边建筑的下标。
对于 ans[i] == -1 ，不存在 Alice 和 Bob 可以相遇的建筑。
解答：
go.cpp文件
    vector<int> leftmostBuildingQueries(vector<int>& heights, vector<vector<int>>& queries) {
        vector<int> ans(queries.size(), -1);
        vector<vector<pair<int, int>>> qs(heights.size());
        for (int i = 0; i < queries.size(); i++) {
            int a = queries[i][0], b = queries[i][1];
            if (a > b) {
                swap(a, b); // 保证 a <= b
            }
            if (a == b || heights[a] < heights[b]) {
                ans[i] = b; // a 直接跳到 b
            } else {
                qs[b].emplace_back(heights[a], i); // 离线询问
            }
        }

        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;
        for (int i = 0; i < heights.size(); i++) {
            while (!pq.empty() && pq.top().first < heights[i]) {
                // 堆顶的 heights[a] 可以跳到 heights[i]
                ans[pq.top().second] = i;
                pq.pop();
            }
            for (auto& p : qs[i]) {
                pq.emplace(p); // 后面再回答
            }
        }
        return ans;
    }
-------------------------------------
1035
题目:
在两条独立的水平线上按给定的顺序写下 nums1 和 nums2 中的整数。
现在，可以绘制一些连接两个数字 nums1[i] 和 nums2[j] 的直线，这些直线需要同时满足：
 nums1[i] == nums2[j]
且绘制的直线不与任何其他连线（非水平线）相交。
请注意，连线即使在端点也不能相交：每个数字只能属于一条连线。
以这种方法绘制线条，并返回可以绘制的最大连线数。

示例 1：
输入：nums1 = [1,4,2], nums2 = [1,2,4]
输出：2
解释：可以画出两条不交叉的线，如上图所示。
但无法画出第三条不相交的直线，因为从 nums1[1]=4 到 nums2[2]=4 的直线将与从 nums1[2]=2 到 nums2[1]=2 的直线相交。
示例 2：
输入：nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]
输出：3
示例 3：
输入：nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]
输出：2
解答：
go.cpp文件
    int maxUncrossedLines(vector<int>& nums1, vector<int>& nums2) {
        int dp[510] = {0};
        for(int i=0;i<nums1.size();i++) {
            for(int j=nums2.size()-1;j>=0;j--) if(nums1[i]==nums2[j]) {
                if(j-1>=0) dp[j] = max(dp[j],dp[j-1]+1);
                else dp[j] = max(dp[j],1);
            }
            for(int j=1;j<nums2.size();j++) {
                dp[j] = max(dp[j], dp[j-1]);
            }
        }
        return dp[nums2.size()-1];
    }
