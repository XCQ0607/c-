------------------------------------------------
题目:

解答：
go.cpp文件


main.cpp文件:
#include "go.cpp"

1.补全go.cpp中的函数，写main.cpp中的main函数，调用go.cpp中的该函数并传入参数

2.对我详细讲述一下题目的问题是什么，要求什么。解释各个传入的变量，各个函数的作用，以及输出值得含义

3.通过示例1详细和我讲一下这个代码从main函数开始发的执行过程。最好使用图形化的方式帮助理解。

4.如果解决代码使用了某种算法，请向我说明并介绍它
------------------------------------------------
3101
题目:
给你一个二进制数组nums,如果一个子数组中 不存在 两个 相邻 元素的值 相同 的情况，我们称这样的子数组为 交替子数组 。
返回数组 nums 中交替子数组的数量。

示例 1：
输入： nums = [0,1,1,1]
输出： 5
解释：
以下子数组是交替子数组：[0] 、[1] 、[1] 、[1] 以及 [0,1] 。
示例 2：
输入： nums = [1,0,1,0]
输出： 10
解释：
数组的每个子数组都是交替子数组。可以统计在内的子数组共有 10 个。

详细执行过程
输入：nums = [0, 1, 1, 0, 1]
初始化 count = n = 5（每个单个元素都是一个交替子数组）。
初始化 length = 1。
从第二个元素开始遍历数组：
i = 1：
nums[1] (1) != nums[0] (0)，所以 length++，即 length = 2。
count += length - 1，即 count = 5 + 1 = 6。
记录的子数组有：[0, 1]。
i = 2：
nums[2] (1) == nums[1] (1)，所以 length = 1。
count 不变，仍然为 6。
i = 3：
nums[3] (0) != nums[2] (1)，所以 length++，即 length = 2。
count += length - 1，即 count = 6 + 1 = 7。
记录的子数组有：[1, 0]。
i = 4：
nums[4] (1) != nums[3] (0)，所以 length++，即 length = 3。
count += length - 1，即 count = 7 + 2 = 9。
记录的子数组有：[0, 1], [1, 0, 1]。

长度为1的子数组：
[0]
[1]
[1]
[0]
[1]
长度为2的子数组：
[0, 1]
[1, 0]
[0, 1]
长度为3的子数组：
[1, 0, 1]

----------------------------------------------
题目:
给定一个二叉树的根节点 root ，返回 它的 中序 遍历 。

示例 1：
输入：root = [1,null,2,3]
输出：[1,3,2]
示例 2：
输入：root = []
输出：[]
示例 3：
输入：root = [1]
输出：[1]
解答：
go.cpp文件
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        function<void(TreeNode*)> dfs = [&](TreeNode* root) {
            if (!root) {
                return;
            }
            dfs(root->left);
            ans.push_back(root->val);
            dfs(root->right);
        };
        dfs(root);
        return ans;
    }

    1
     \
      2
     /
    3
从main函数开始：
创建树节点root（值1），root->right（值2），root->right->left（值3）。
调用inorderTraversal函数，传入root。
在inorderTraversal函数中，定义了dfs递归函数，并调用dfs(root)。
dfs递归过程：
第一次调用：node为节点1，先递归左子树（为空，返回），访问节点1（添加1到结果），递归右子树（节点2）。
第二次调用：node为节点2，先递归左子树（节点3），访问节点2（添加2到结果），递归右子树（为空，返回）。
第三次调用：node为节点3，先递归左子树（为空，返回），访问节点3（添加3到结果），递归右子树（为空，返回）。
最终的中序遍历结果为[1, 3, 2]。

算法介绍
这个代码使用了深度优先搜索（DFS）的递归方式来实现中序遍历。DFS是一种遍历或搜索树或图的算法，该算法会尽可能深的搜索树的分支。中序遍历是DFS的一种特例，其特点是先访问左子树，再访问根节点，最后访问右子树。DFS递归实现简洁且易于理解，但对于特别深的树，可能会导致栈溢出。

vector<int> inorderTraversal(TreeNode* root):
定义一个函数 inorderTraversal，接受一个 TreeNode* 类型的参数 root，返回一个 vector<int> 类型的结果。
vector<int> ans:
定义一个名为 ans 的 vector<int>，用于存储中序遍历的结果。
function<void(TreeNode*)> dfs = [&](TreeNode* root) { ... };:
定义一个 dfs lambda表达式，用于递归遍历二叉树。它没有返回值，接受一个 TreeNode* 类型的参数 root。[&] 表示捕获外部作用域中的所有变量（包括 ans）并按引用传递。
dfs(root->left);:
递归调用 dfs 以遍历左子树。
ans.push_back(root->val);:
将当前节点的值添加到 ans 中。
dfs(root->right);:
递归调用 dfs 以遍历右子树。
dfs(root);:
开始从根节点开始进行中序遍历。
return ans;:
返回包含中序遍历结果的 ans。
总结来说，你的代码使用了C++11的lambda表达式和 std::function，通过递归实现二叉树的中序遍历，并将遍历结果存储在 vector<int> 中。

------------------------------------------------
题目:
给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。
百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”
例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]

示例 1:
输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
输出: 6 
解释: 节点 2 和节点 8 的最近公共祖先是 6。
示例 2:
输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
输出: 2
解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。
解答：
go.cpp文件
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if (p->val < root->val && q->val < root->val) {
             return lowestCommonAncestor(root->left, p, q);
         }
         else if (p->val > root->val && q->val > root->val) {
             return lowestCommonAncestor(root->right, p, q);
         }
         else {
             return root;
         }
    }
       6
      / \
     2   8
    / \ / \
   0  4 7  9
     / \
    3   5
判断条件分析：
二叉搜索树（BST）性质：

左子树中的所有节点的值小于根节点的值。
右子树中的所有节点的值大于根节点的值。
这个性质使得我们可以根据节点的值快速确定下一步应该遍历左子树还是右子树。

还有普通二叉树
    TreeNode* leftLCA = lowestCommonAncestor(root->left, p, q);
    TreeNode* rightLCA = lowestCommonAncestor(root->right, p, q);
    两个都执行一遍，根据是否有返回值确定具体方位
